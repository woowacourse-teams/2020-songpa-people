buildscript {
    ext {
        springBootVersion = '2.3.1.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE"
        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.10"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.9.2"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.0"
    }
}

subprojects {
    group = 'com.songpapeople'

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: "org.sonarqube"

    sourceCompatibility = '1.8'

    repositories {
        mavenCentral()
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        runtimeOnly 'com.h2database:h2:1.4.199'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    jacoco {
        toolVersion = '0.8.5'
    }

    jacocoTestReport {
        reports {
            html.enabled true
            xml.enabled true
            csv.enabled false
        }

        def Qdomains = []
        for(qPattern in "**/QA" .. "**/QZ"){
            Qdomains.add(qPattern+"*")
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: [] + Qdomains)
            }))
        }

        finalizedBy 'jacocoTestCoverageVerification'
    }

    test {
        useJUnitPlatform()
        finalizedBy 'jacocoTestReport'
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    sonarqube {
        properties {
            property "sonar.host.url", "https://sonar.themiso.kr"
            property "sonar.login", "2036ce58eaf842e7512923b39f0a6ebb47e4f883"
            property "sonar.sources", "src"
            property "sonar.language", "java"
            property "sonar.projectVersion", "1.0"
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
            property "sonar.test.inclusions", "**/*Test.java"
        }
    }
}

def asciidoctorConfigure = [project(':hashtagmap-web'), project(':hashtagmap-admin')]
configure(asciidoctorConfigure) {
    apply plugin: "org.asciidoctor.convert"

    dependencies {
        asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.4.RELEASE'
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.4.RELEASE'
    }

    ext {
        snippetsDir = file('build/generated-snippets')
    }

    test {
        useJUnitPlatform()
        outputs.dir snippetsDir
    }

    asciidoctor {
        inputs.dir snippetsDir
        dependsOn test
    }

    bootJar {
        dependsOn asciidoctor
        from("${asciidoctor.outputDir}/html5") {
            into 'static/docs'
        }
    }
}

project(':hashtagmap-common') {
    sonarqube {
        skipProject = true
    }
}
